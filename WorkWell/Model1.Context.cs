//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkWell
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class JobPortalEntities : DbContext
    {
        public JobPortalEntities()
            : base("name=JobPortalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Company_tbl> Company_tbl { get; set; }
        public virtual DbSet<Login_tbl> Login_tbl { get; set; }
        public virtual DbSet<User_tbl> User_tbl { get; set; }
        public virtual DbSet<Job_vacancies_tbl> Job_vacancies_tbl { get; set; }
        public virtual DbSet<Apply_tbl> Apply_tbl { get; set; }
    
        public virtual int sp_CompanyInsert(Nullable<int> cid, string cname, string cadd, string cph, string cemail)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var cnameParameter = cname != null ?
                new ObjectParameter("cname", cname) :
                new ObjectParameter("cname", typeof(string));
    
            var caddParameter = cadd != null ?
                new ObjectParameter("cadd", cadd) :
                new ObjectParameter("cadd", typeof(string));
    
            var cphParameter = cph != null ?
                new ObjectParameter("cph", cph) :
                new ObjectParameter("cph", typeof(string));
    
            var cemailParameter = cemail != null ?
                new ObjectParameter("cemail", cemail) :
                new ObjectParameter("cemail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CompanyInsert", cidParameter, cnameParameter, caddParameter, cphParameter, cemailParameter);
        }
    
        public virtual int sp_login(string una, string pass, ObjectParameter status)
        {
            var unaParameter = una != null ?
                new ObjectParameter("una", una) :
                new ObjectParameter("una", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_login", unaParameter, passParameter, status);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_loginId(string una, string pass)
        {
            var unaParameter = una != null ?
                new ObjectParameter("una", una) :
                new ObjectParameter("una", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_loginId", unaParameter, passParameter);
        }
    
        public virtual int sp_logininsert(Nullable<int> regid, string una, string pass, string utype)
        {
            var regidParameter = regid.HasValue ?
                new ObjectParameter("regid", regid) :
                new ObjectParameter("regid", typeof(int));
    
            var unaParameter = una != null ?
                new ObjectParameter("una", una) :
                new ObjectParameter("una", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            var utypeParameter = utype != null ?
                new ObjectParameter("utype", utype) :
                new ObjectParameter("utype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_logininsert", regidParameter, unaParameter, passParameter, utypeParameter);
        }
    
        public virtual ObjectResult<string> sp_logintype(string una, string pass)
        {
            var unaParameter = una != null ?
                new ObjectParameter("una", una) :
                new ObjectParameter("una", typeof(string));
    
            var passParameter = pass != null ?
                new ObjectParameter("pass", pass) :
                new ObjectParameter("pass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_logintype", unaParameter, passParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_maxIdLogin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_maxIdLogin");
        }
    
        public virtual int sp_UserInsert(Nullable<int> uid, string uname, Nullable<int> uag, string uadd, string uph, string uemil, string exp, string uskil, string ures, string dob, string photo)
        {
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(int));
    
            var unameParameter = uname != null ?
                new ObjectParameter("uname", uname) :
                new ObjectParameter("uname", typeof(string));
    
            var uagParameter = uag.HasValue ?
                new ObjectParameter("uag", uag) :
                new ObjectParameter("uag", typeof(int));
    
            var uaddParameter = uadd != null ?
                new ObjectParameter("uadd", uadd) :
                new ObjectParameter("uadd", typeof(string));
    
            var uphParameter = uph != null ?
                new ObjectParameter("uph", uph) :
                new ObjectParameter("uph", typeof(string));
    
            var uemilParameter = uemil != null ?
                new ObjectParameter("uemil", uemil) :
                new ObjectParameter("uemil", typeof(string));
    
            var expParameter = exp != null ?
                new ObjectParameter("exp", exp) :
                new ObjectParameter("exp", typeof(string));
    
            var uskilParameter = uskil != null ?
                new ObjectParameter("uskil", uskil) :
                new ObjectParameter("uskil", typeof(string));
    
            var uresParameter = ures != null ?
                new ObjectParameter("ures", ures) :
                new ObjectParameter("ures", typeof(string));
    
            var dobParameter = dob != null ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("photo", photo) :
                new ObjectParameter("photo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserInsert", uidParameter, unameParameter, uagParameter, uaddParameter, uphParameter, uemilParameter, expParameter, uskilParameter, uresParameter, dobParameter, photoParameter);
        }
    
        public virtual ObjectResult<sp_getJobVacancy_Result> sp_getJobVacancy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getJobVacancy_Result>("sp_getJobVacancy");
        }
    
        public virtual int sp_InsertJobVacancy(Nullable<int> company_Id, string title, string des, string exp, string skill, string jtype, string location, string salary, string postedDate, string closingDate, string status)
        {
            var company_IdParameter = company_Id.HasValue ?
                new ObjectParameter("company_Id", company_Id) :
                new ObjectParameter("company_Id", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var desParameter = des != null ?
                new ObjectParameter("des", des) :
                new ObjectParameter("des", typeof(string));
    
            var expParameter = exp != null ?
                new ObjectParameter("exp", exp) :
                new ObjectParameter("exp", typeof(string));
    
            var skillParameter = skill != null ?
                new ObjectParameter("skill", skill) :
                new ObjectParameter("skill", typeof(string));
    
            var jtypeParameter = jtype != null ?
                new ObjectParameter("jtype", jtype) :
                new ObjectParameter("jtype", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(string));
    
            var salaryParameter = salary != null ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(string));
    
            var postedDateParameter = postedDate != null ?
                new ObjectParameter("PostedDate", postedDate) :
                new ObjectParameter("PostedDate", typeof(string));
    
            var closingDateParameter = closingDate != null ?
                new ObjectParameter("ClosingDate", closingDate) :
                new ObjectParameter("ClosingDate", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertJobVacancy", company_IdParameter, titleParameter, desParameter, expParameter, skillParameter, jtypeParameter, locationParameter, salaryParameter, postedDateParameter, closingDateParameter, statusParameter);
        }
    
        public virtual ObjectResult<SP_getJobs_Result> SP_getJobs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getJobs_Result>("SP_getJobs");
        }
    
        public virtual int sp_jobApplication(Nullable<int> uid, Nullable<int> jobid, Nullable<int> cid, string resume, string applydate, string status)
        {
            var uidParameter = uid.HasValue ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(int));
    
            var jobidParameter = jobid.HasValue ?
                new ObjectParameter("jobid", jobid) :
                new ObjectParameter("jobid", typeof(int));
    
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var resumeParameter = resume != null ?
                new ObjectParameter("resume", resume) :
                new ObjectParameter("resume", typeof(string));
    
            var applydateParameter = applydate != null ?
                new ObjectParameter("applydate", applydate) :
                new ObjectParameter("applydate", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_jobApplication", uidParameter, jobidParameter, cidParameter, resumeParameter, applydateParameter, statusParameter);
        }
    }
}
